buildscript {
    repositories {
        mavenLocal()
		maven { url "https://nexus.ala.org.au/content/groups/public/" }
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:2.14.2"
    }
}

version "2.0.7-SNAPSHOT"
group "au.org.ala.plugins.grails"

apply plugin:"eclipse"
apply plugin:"idea"
apply plugin:"org.grails.grails-plugin"
apply plugin:"org.grails.grails-plugin-publish"
apply plugin:"org.grails.grails-gsp"
apply plugin:"asset-pipeline"
apply plugin:"maven-publish"

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenLocal()
	maven { url "https://nexus.ala.org.au/content/groups/public/" }
    maven { url "https://repo.grails.org/grails/core" }
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 1, 'minutes'
}

// Inplace plugin config

// Set to true it needed only for development
boolean inplace = false
// Inplace plugins ala-charts-plugin and images-client-plugin are defined in ala-hub configuration

dependencies {
    def noCache = {
        exclude group: 'org.grails.plugins', module: 'cache'
        exclude group: 'org.ehcache', module: 'ehcache'
    }

    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.grails:grails-core"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.grails:grails-dependencies"
    compile "org.grails:grails-web-boot"
    compile "org.grails.plugins:cache"
    compile "org.grails.plugins:scaffolding"
    console "org.grails:grails-console"
    profile "org.grails.profiles:web-plugin"
    provided "org.grails:grails-plugin-services"
    provided "org.grails:grails-plugin-domain-class"
    runtime "com.bertramlabs.plugins:asset-pipeline-grails:2.14.2"
    testCompile "org.grails:grails-plugin-testing"
    testCompile "org.grails.plugins:geb"
    testRuntime "org.seleniumhq.selenium:selenium-htmlunit-driver:2.47.1"
    testRuntime "net.sourceforge.htmlunit:htmlunit:2.18"

    //jars
    compile "commons-httpclient:commons-httpclient:3.1"
    compile 'com.maxmind.geoip2:geoip2:2.9.0'
    runtime "commons-lang:commons-lang:2.6"
    compile "net.sf.supercsv:super-csv:2.1.0"
    //compile 'com.google.guava:guava:19.0' // replaces ehcache

    //plugins
    //compile 'org.grails.plugins:cache-ehcache:3.0.0.M1'
    compile 'org.grails.plugins:http-builder-helper:1.0.2.ALA'
    compile "org.grails.plugins:ala-admin-plugin:2.0", noCache
    compile "org.grails.plugins:ala-auth:3.0.2", noCache

    if(!inplace) {
        compile "au.org.ala.plugins.grails:images-client-plugin:1.0", noCache
        compile "au.org.ala.plugins.grails:ala-charts-plugin:2.0.1", noCache
    }

}

bootRun {
    jvmArgs('-Dspring.output.ansi.enabled=always')
    addResources = true
}
// enable if you wish to package this plugin as a standalone application
bootRepackage.enabled = false
grailsPublish {
    // TODO: Provide values here
//    user = 'user'
//    key = 'key'

    githubSlug = 'AtlasOfLivingAustralia/biocache-hubs'
    websiteUrl = 'https://github.com/AtlasOfLivingAustralia/biocache-hubs'
    license {
        name = 'MPL-1.1'
    }
    issueTrackerUrl = 'https://github.com/AtlasOfLivingAustralia/biocache-hubs/issues'
    vcsUrl = 'https://github.com/AtlasOfLivingAustralia/biocache-hubs'
    title = "Biocache Hubs Plugin"
    desc = '''\
A Grails plugin to provide the core functionality for searching and displaying biodiversity data from
biocache web services. Data access is via JSON REST web services
from the ALA biocache-service app (no local DB is required for this app).
'''
    developers = [:]
}


assets {
    packagePlugin = true
}

publishing {
    repositories {
        maven {
            name 'Nexus'
            url "https://nexus.ala.org.au/content/repositories/${project.version.endsWith('-SNAPSHOT') ? 'snapshots' : 'releases' }"
            credentials {
                username = System.getenv('TRAVIS_DEPLOY_USERNAME')
                password = System.getenv('TRAVIS_DEPLOY_PASSWORD')
            }
        }
    }
    publications {
        mavenJar(MavenPublication) {
            pom.withXml {
                def pomNode = asNode()
                pomNode.dependencyManagement.replaceNode {}

                // simply remove dependencies without a version
                // version-less dependencies are handled with dependencyManagement
                // see https://github.com/spring-gradle-plugins/dependency-management-plugin/issues/8 for more complete solutions
                pomNode.dependencies.dependency.findAll {
                    it.version.text().isEmpty()
                }.each {
                    it.replaceNode {}
                }
            }
            from components.java

        }
    }
}
